// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RoutesStation.Models;

#nullable disable

namespace RoutesStation.Migrations
{
    [DbContext(typeof(ApplicationDb))]
    [Migration("20220512085657_RS30")]
    partial class RS30
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationBus", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompanyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DriverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Kind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PalteNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("RouteID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SocondID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("DriverID");

                    b.HasIndex("PalteNumber")
                        .IsUnique();

                    b.HasIndex("RouteID");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationBusDriverMap", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DriverID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("End_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start_Date")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("BusID");

                    b.HasIndex("DriverID");

                    b.ToTable("BusDriverMaps");
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationCompany", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("Company")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationInspectionBusMap", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BusID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Creat_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("InspectorID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("BusID");

                    b.HasIndex("InspectorID");

                    b.ToTable("InspectionBusMaps");
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationInspectionUserMap", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Creat_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("InspectorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("InspectorID");

                    b.HasIndex("UserID");

                    b.ToTable("InspectionUserMaps");
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationPromoterInstallationMap", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Installation_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("PromoterID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("PromoterID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("PromoterInstallationMaps");
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationRoute", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Area_AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Area_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("From_To_AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("From_To_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_EN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("company")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationRouteStationMap", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Creat_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<bool>("HelpStation")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("RouteID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StationID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("RouteID");

                    b.HasIndex("StationID");

                    b.ToTable("RouteStationMaps");
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationStation", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DirectionStation")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Title_AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title_EN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationTrip", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Creat_Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("EndPointLong")
                        .HasColumnType("float");

                    b.Property<double>("EndPointLut")
                        .HasColumnType("float");

                    b.Property<Guid?>("EndStationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RouteID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("StartPointLong")
                        .HasColumnType("float");

                    b.Property<double>("StartPointLut")
                        .HasColumnType("float");

                    b.Property<Guid?>("StartStationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("EndStationID");

                    b.HasIndex("RouteID");

                    b.HasIndex("StartStationID");

                    b.HasIndex("UserID");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FCMToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationWallet", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("UserID");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationWalletCharging", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InspectorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Payment_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("PromoterID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TypeCharge")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<int?>("invoiceId")
                        .HasColumnType("int");

                    b.Property<string>("paymentGateway")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("InspectorID");

                    b.HasIndex("PromoterID");

                    b.HasIndex("UserID");

                    b.ToTable("WalletChargings");
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationWalletTrip", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BusID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DriverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InspectorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Payment_Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TripID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("BusID");

                    b.HasIndex("DriverID");

                    b.HasIndex("InspectorID");

                    b.HasIndex("TripID");

                    b.HasIndex("UserID");

                    b.ToTable("WalletTrips");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("RoutesStation.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RoutesStation.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RoutesStation.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("RoutesStation.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoutesStation.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RoutesStation.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationBus", b =>
                {
                    b.HasOne("RoutesStation.Models.ApplicationCompany", "ApplicationCompany")
                        .WithMany()
                        .HasForeignKey("CompanyID");

                    b.HasOne("RoutesStation.Models.ApplicationUser", "ApplicationDriver")
                        .WithMany()
                        .HasForeignKey("DriverID");

                    b.HasOne("RoutesStation.Models.ApplicationRoute", "ApplicationRoute")
                        .WithMany()
                        .HasForeignKey("RouteID");

                    b.Navigation("ApplicationCompany");

                    b.Navigation("ApplicationDriver");

                    b.Navigation("ApplicationRoute");
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationBusDriverMap", b =>
                {
                    b.HasOne("RoutesStation.Models.ApplicationBus", "ApplicationBus")
                        .WithMany()
                        .HasForeignKey("BusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoutesStation.Models.ApplicationUser", "ApplicationDriver")
                        .WithMany()
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationBus");

                    b.Navigation("ApplicationDriver");
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationInspectionBusMap", b =>
                {
                    b.HasOne("RoutesStation.Models.ApplicationBus", "ApplicationBus")
                        .WithMany()
                        .HasForeignKey("BusID");

                    b.HasOne("RoutesStation.Models.ApplicationUser", "ApplicationInspector")
                        .WithMany()
                        .HasForeignKey("InspectorID");

                    b.Navigation("ApplicationBus");

                    b.Navigation("ApplicationInspector");
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationInspectionUserMap", b =>
                {
                    b.HasOne("RoutesStation.Models.ApplicationUser", "ApplicationInspector")
                        .WithMany()
                        .HasForeignKey("InspectorID");

                    b.HasOne("RoutesStation.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("ApplicationInspector");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationPromoterInstallationMap", b =>
                {
                    b.HasOne("RoutesStation.Models.ApplicationUser", "ApplicationPromoter")
                        .WithMany()
                        .HasForeignKey("PromoterID");

                    b.HasOne("RoutesStation.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("ApplicationPromoter");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationRouteStationMap", b =>
                {
                    b.HasOne("RoutesStation.Models.ApplicationRoute", "ApplicationRoute")
                        .WithMany()
                        .HasForeignKey("RouteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoutesStation.Models.ApplicationStation", "ApplicationStation")
                        .WithMany()
                        .HasForeignKey("StationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationRoute");

                    b.Navigation("ApplicationStation");
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationTrip", b =>
                {
                    b.HasOne("RoutesStation.Models.ApplicationStation", "EndStation")
                        .WithMany()
                        .HasForeignKey("EndStationID");

                    b.HasOne("RoutesStation.Models.ApplicationRoute", "ApplicationRoute")
                        .WithMany()
                        .HasForeignKey("RouteID");

                    b.HasOne("RoutesStation.Models.ApplicationStation", "StartStation")
                        .WithMany()
                        .HasForeignKey("StartStationID");

                    b.HasOne("RoutesStation.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationRoute");

                    b.Navigation("EndStation");

                    b.Navigation("StartStation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationUser", b =>
                {
                    b.HasOne("RoutesStation.Models.ApplicationCompany", "ApplicationCompany")
                        .WithMany()
                        .HasForeignKey("CompanyID");

                    b.Navigation("ApplicationCompany");
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationWallet", b =>
                {
                    b.HasOne("RoutesStation.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationWalletCharging", b =>
                {
                    b.HasOne("RoutesStation.Models.ApplicationUser", "ApplicationInspector")
                        .WithMany()
                        .HasForeignKey("InspectorID");

                    b.HasOne("RoutesStation.Models.ApplicationUser", "ApplicationPromoter")
                        .WithMany()
                        .HasForeignKey("PromoterID");

                    b.HasOne("RoutesStation.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationInspector");

                    b.Navigation("ApplicationPromoter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoutesStation.Models.ApplicationWalletTrip", b =>
                {
                    b.HasOne("RoutesStation.Models.ApplicationBus", "ApplicationBus")
                        .WithMany()
                        .HasForeignKey("BusID");

                    b.HasOne("RoutesStation.Models.ApplicationUser", "ApplicationDriver")
                        .WithMany()
                        .HasForeignKey("DriverID");

                    b.HasOne("RoutesStation.Models.ApplicationUser", "ApplicationInspector")
                        .WithMany()
                        .HasForeignKey("InspectorID");

                    b.HasOne("RoutesStation.Models.ApplicationTrip", "ApplicationTrip")
                        .WithMany()
                        .HasForeignKey("TripID");

                    b.HasOne("RoutesStation.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationBus");

                    b.Navigation("ApplicationDriver");

                    b.Navigation("ApplicationInspector");

                    b.Navigation("ApplicationTrip");

                    b.Navigation("ApplicationUser");
                });
#pragma warning restore 612, 618
        }
    }
}
